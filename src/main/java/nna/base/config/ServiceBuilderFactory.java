package nna.base.config;import nna.enums.DBOperType;import nna.enums.DBTranPpgType;import nna.enums.DBTranLvlType;import nna.base.bean.dbbean.*;import nna.transaction.AbstractTransaction;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.poifs.filesystem.POIFSFileSystem;import java.io.FileInputStream;import java.io.IOException;import java.sql.SQLException;import java.sql.Timestamp;import java.util.ArrayList;import java.util.List;/** * Build Service * * @author * @create 2017-04-24 21:20 **/public class ServiceBuilderFactory implements ServiceBuilder {    private HSSFWorkbook cfgXlSBook;    private HSSFSheet currentCfgSheet;    private HSSFRow currentRow;    private int currentRowNo=1;    private RowMapper currentRowMapper;    private ServiceConfig serviceConfig;    private void init(String sheetName){        currentCfgSheet=cfgXlSBook.getSheet(sheetName);        currentRow=null;        currentRowNo=1;        currentRow=currentCfgSheet.getRow(currentRowNo);        currentRowMapper=getCurrentRowMapper(sheetName);        System.out.println(sheetName+"-"+currentCfgSheet.getPhysicalNumberOfRows());        System.out.println(currentRowMapper.getClass().getCanonicalName());    }    public ServiceBuilder buildXLXCfgFile(String xlsFileName) throws IOException {        serviceConfig =new ServiceConfig();        FileInputStream fileIn = null;        fileIn = new FileInputStream(xlsFileName);        POIFSFileSystem fs = new POIFSFileSystem(fileIn);        HSSFWorkbook wb = new HSSFWorkbook(fs);        cfgXlSBook=wb;        return this;    }    public ServiceBuilder buildCfgApp() {        buildTmeplateMethod("应用");        return this;    }    public ServiceBuilder buildController() {        buildTmeplateMethod("控制器");        return this;    }    public ServiceBuilder buildService() {        buildTmeplateMethod("服务");        return this;    }    public ServiceBuilder buildRequest() {        buildTmeplateMethod("入参");        return this;    }    public ServiceBuilder buildResponse() {        buildTmeplateMethod("出参");        return this;    }    public ServiceBuilder buildBusinessAction() {        buildTmeplateMethod("业务动作");        return this;    }    public ServiceBuilder buildBBMap() {        buildTmeplateMethod("动作配置");        return this;    }    public ServiceBuilder buildDBSQL() {        buildTmeplateMethod("DBSQL");        return this;    }    public ServiceBuilder buildCreator() {        buildTmeplateMethod("创建者");        return this;    }    public ServiceBuilder buildUpdator() {        buildTmeplateMethod("维护者");        return this;    }    public ServiceBuilder buildSource() {        buildTmeplateMethod("源码");        return this;    }    public ServiceBuilder buildTmeplateMethod(String sheetName) {        init(sheetName);        do{            if(currentRow==null||currentCfgSheet.getPhysicalNumberOfRows()==1){                break;            }            getListWithSheetName(sheetName).add(currentRowMapper.mapper(currentRow));            currentRowNo++;            currentRow=currentCfgSheet.getRow(currentRowNo);        }while(true);        return this;    }    public ServiceConfig buildDefaultCfg(String cfgXlSFileName) throws IOException {        this.buildXLXCfgFile(cfgXlSFileName)                .buildBusinessAction()                .buildBBMap()                .buildCfgApp()                .buildController()                .buildCreator()                .buildDBSQL()                .buildRequest()                .buildResponse()                .buildService()                .buildSource()                .buildUpdator();        return serviceConfig;    }    private RowMapper getCurrentRowMapper(String sheetName){        switch (SheetType.valueOf(sheetName)){            case 应用:                return new BeenServiceAppRowMapper();            case 入参:                return new DataMetaDataRowMapper();            case 出参:                return new DataMetaDataRowMapper();            case 服务:                return new ServiceRowMapper();            case 创建者:                return new UpdatorRowMapper();            case 控制器:                return new ControllerRowMapper();            case 维护者:                return new UpdatorRowMapper();            case 业务动作:                return new DBActionRowMapper();            case 动作配置:                return new ActionMapRowMapper();            case DBSQL:        }       return new BusidatakeyRowMapper();    }    private List getListWithSheetName(String sheetName){        switch (SheetType.valueOf(sheetName)){            case 应用:                if(serviceConfig.getApps()==null){                    serviceConfig.setApps(new ArrayList<PlatformApp>(5));                }                return serviceConfig.getApps();            case 入参:                if(serviceConfig.getRequest()==null){                    serviceConfig.setRequest(new ArrayList<PlatformColumn>());                }                return serviceConfig.getResponse();            case 出参:                if(serviceConfig.getResponse()==null){                    serviceConfig.setResponse(new ArrayList<PlatformColumn>());                }                return serviceConfig.getResponse();            case 服务:                if(serviceConfig.getServices()==null){                    serviceConfig.setServices(new ArrayList<PlatformService>(1));                }                return serviceConfig.getServices();            case 创建者:                if(serviceConfig.getCreators()==null){                    serviceConfig.setServices(new ArrayList<PlatformService>(1));                }                return serviceConfig.getCreators();            case 控制器:                if(serviceConfig.getControllers()==null){                    serviceConfig.setControllers(new ArrayList<PlatformController>(5));                }                return serviceConfig.getControllers();            case 维护者:                if(serviceConfig.getUpdators()==null){                    serviceConfig.setUpdators(new ArrayList<PlatformDevelopVersion>());                }                return serviceConfig.getUpdators();            case 业务动作:                if(serviceConfig.getTransactions()==null){                    serviceConfig.setTransactions(new ArrayList<PlatformTransaction>(3));                }                return serviceConfig.getTransactions();            case 动作配置:                if(serviceConfig.getServiceTransactions()==null){                    serviceConfig.setServiceTransactions(new ArrayList<PlatformServiceTransaction>());                }                return serviceConfig.getServiceTransactions();            case DBSQL:                if(serviceConfig.getSqlCfgs()==null){                    serviceConfig.setSqlCfgs(new ArrayList<PlatformSql>());                }                return serviceConfig.getSqlCfgs();        }        return null;    }    public ServiceConfig getServiceConfig() {        return serviceConfig;    }    class BeenServiceAppRowMapper implements RowMapper{        public PlatformApp mapper(HSSFRow row) {            PlatformApp beenServiceApp=new PlatformApp();            beenServiceApp.setAppEn(row.getCell(0).getStringCellValue());            beenServiceApp.setAppCh(row.getCell(1).getStringCellValue());            beenServiceApp.setAppCreateTimestamp(new Timestamp(Long.valueOf(row.getCell(2).getStringCellValue())));            beenServiceApp.setAppDesc(row.getCell(3).getStringCellValue());            return beenServiceApp;        }    }    class ControllerRowMapper implements RowMapper{        public PlatformController mapper(HSSFRow row) {            PlatformController controller=new PlatformController();            controller.setService(row.getCell(2).getStringCellValue());            controller.setRenderClass(row.getCell(3)==null?"":row.getCell(3).getStringCellValue());            controller.setRenderMethod(row.getCell(4)==null?"":row.getCell(4).getStringCellValue());            controller.setStatus(row.getCell(5).getStringCellValue()=="开启");            controller.setRenderPage(row.getCell(6)==null?"":row.getCell(6).getStringCellValue());            controller.setControllerDesc(row.getCell(7).getStringCellValue());            return controller;        }    }    class ServiceRowMapper implements RowMapper{        public PlatformService mapper(HSSFRow row) {            PlatformService service=new PlatformService();            service.setServiceName(row.getCell(0).getStringCellValue());            service.setServiceClass(row.getCell(1).getStringCellValue());            service.setServiceMethod(row.getCell(2).getStringCellValue());            service.setCreateTimestamp(new Timestamp(Long.valueOf(row.getCell(3).getStringCellValue().trim())));            service.setUpdateTimestamp(new Timestamp(Long.valueOf(row.getCell(4).getStringCellValue().trim())));            service.setStatus(row.getCell(5).getStringCellValue()=="开启");            service.setServiceDesc(row.getCell(6).getStringCellValue());            return service;        }    }    class DataMetaDataRowMapper implements RowMapper{        public PlatformColumn mapper(HSSFRow row) {            PlatformColumn dmd=new PlatformColumn();            dmd.setColumnId(row.getCell(0).getStringCellValue());            dmd.setColumnNo(Integer.valueOf(row.getCell(1).getStringCellValue().trim()) );            dmd.setColumnDefaultvalue(row.getCell(2).getStringCellValue());            dmd.setColumnOutsideName(row.getCell(3).getStringCellValue());            dmd.setColumnInnerName(row.getCell(4).getStringCellValue());            dmd.setColumnLength((int) row.getCell(5).getNumericCellValue());            dmd.setColumnIsarray(row.getCell(6).getStringCellValue()=="是");            dmd.setColumnFormat(row.getCell(7).getStringCellValue());            dmd.setColumnIsmust(row.getCell(8).getStringCellValue()=="是");            dmd.setColumnDesc(row.getCell(9).getStringCellValue());            return dmd;        }    }    class DBActionRowMapper implements RowMapper{        public PlatformServiceTransaction mapper(HSSFRow row) {            PlatformServiceTransaction busioper=new PlatformServiceTransaction();            busioper.setServiceName(row.getCell(0).getStringCellValue());            busioper.setTransactionName(row.getCell(1).getStringCellValue());            busioper.setTransactionPropagation(DBTranPpgType.valueOf(row.getCell(2).getStringCellValue()));            busioper.setTransactionLevel(DBTranLvlType.valueOf(row.getCell(3).getStringCellValue()));            busioper.setPreviousTransactionIndex(Integer.valueOf(row.getCell(4).getStringCellValue()));            busioper.setTransactionDesc(row.getCell(5).getStringCellValue());            busioper.setPreviousTransactionIndex(Integer.valueOf(row.getCell(6).getStringCellValue()));            return busioper;        }    }    class ActionMapRowMapper implements RowMapper{        public PlatformTransaction mapper(HSSFRow row) {            PlatformTransaction bbMap=new PlatformTransaction();            bbMap.setTransactionName(row.getCell(0).getStringCellValue());            bbMap.setSqlId(row.getCell(1).getStringCellValue());            bbMap.setSqlSequence((int)row.getCell(2).getNumericCellValue());            bbMap.setSqlDesc(row.getCell(3).getStringCellValue());            return bbMap;        }    }    class BusidatakeyRowMapper implements RowMapper{        public PlatformSql mapper(HSSFRow row) {            PlatformSql dmd=new PlatformSql();            dmd.setSqlId(row.getCell(0).getStringCellValue());            dmd.setOpertype(DBOperType.valueOf(row.getCell(1).getStringCellValue()));            dmd.setSqlstr(row.getCell(2)==null?"":row.getCell(2).getStringCellValue());            dmd.setDbColumn(row.getCell(3).getStringCellValue());            dmd.setAppColumn(row.getCell(4).getStringCellValue());            dmd.setDbCondition(row.getCell(5)==null?"":row.getCell(5).getStringCellValue());            dmd.setAppCondition(row.getCell(6)==null?"":row.getCell(6).getStringCellValue());            dmd.setCompareKv(row.getCell(7)==null?"":row.getCell(7).getStringCellValue());            dmd.setLogicKk(row.getCell(8)==null?"":row.getCell(8).getStringCellValue());            dmd.setTableName(row.getCell(9).getStringCellValue());            dmd.setGroupOrder(row.getCell(10)==null?"":row.getCell(10).getStringCellValue());//            dmd.setCreateTimestamp(row.getCell(11).getStringCellValue());            dmd.setUpdateTimestamp(new Timestamp(Long.valueOf(row.getCell(12)==null?"":row.getCell(12).getStringCellValue())));//            dmd.setsql(row.getCell(13).getStringCellValue());            dmd.setPage(row.getCell(14).getStringCellValue().equals("0")?false:true);            return dmd;        }    }    class UpdatorRowMapper implements RowMapper{        public PlatformDevelopVersion mapper(HSSFRow row) {            PlatformDevelopVersion serviceUpdator=new PlatformDevelopVersion();            serviceUpdator.setUpdateTimestamp(new Timestamp(Long.valueOf(row.getCell(0).getStringCellValue())));            serviceUpdator.setUpdateUserid(Integer.valueOf(row.getCell(1).getStringCellValue()));            serviceUpdator.setUpdateVersion(Integer.valueOf(row.getCell(2).getStringCellValue()));            serviceUpdator.setUpdateDesc(row.getCell(3).getStringCellValue());            return serviceUpdator;        }    }    public static void main(String[] args){        ServiceBuilderFactory sbf=new ServiceBuilderFactory();        try {            ServiceConfig serviceConfig =sbf.buildDefaultCfg("./ServiceMFINFO1.xls");            System.out.println(serviceConfig.getApps().size());            System.out.println(serviceConfig.getServices().size());            System.out.println(serviceConfig.getSqlCfgs().size());            System.out.println(serviceConfig.getTransactions().size());            System.out.println(AbstractTransaction.buildSQL(serviceConfig.getSqlCfgs().get(0)));        } catch (IOException e) {            e.printStackTrace();        } catch (SQLException e) {            e.printStackTrace();        }    }}